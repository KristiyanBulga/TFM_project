service: google-maps

frameworkVersion: "=3.28.1"

package:
  patterns:
    - '!./**'
    - 'functions/**'
    - 'utils/**'

custom:
  defaultStage: dev
  defaultRegion: us-east-1
  stage: ${opt:stage, self:custom.defaultStage}
  region: ${opt:region, self:custom.defaultRegion}
  role: arn:aws:iam::891376954408:role/LabRole
  googleMapsBucketName: ${self:service}-bucket-${self:custom.stage}
  googleMapsCandidatesDB: ${self:service}-candidates-db-${self:custom.stage}
  notifyAdminTopic: ${self:service}-notify-admin-topic-${self:custom.stage}
  googleMapsQueue: ${self:service}-find-id-queue-${self:custom.stage}
  googleMapsGetDataQueue: ${self:service}-get-data-queue-${self:custom.stage}

provider:
  name: aws
  runtime: python3.9
  region: ${self:custom.region}
  stage: ${self:custom.stage}
  deploymentBucket:
    name: tfm-deployment-bucket
  environment:
    region: ${self:custom.region}
    stage: ${self:custom.stage}
    GOOGLE_MAPS_NOTIFY_ADMIN_TOPIC_ARN: {Ref: NotifyAdminTopic}

functions:
  new-restaurants-to-sqs:
    role: ${self:custom.role}
    description: 'For each new restaurant add to queue for google maps id searching'
    handler: functions/schedule_restaurant.handler
    timeout: 900
    events:
      - schedule:
          name: schedule-google-maps-restaurant-id-obtaining-ab-chinchilla
          description: 'Invoke lambda that adds restaurants to a queue for id obtaining (Albacete-Chinchilla)'
          rate: cron(20 4 * * ? *)
          enabled: true
          input:
            trip_advisor_place_id: g1435704
            data_to_obtain: restaurant_id
      - schedule:
          name: schedule-google-maps-restaurant-id-obtaining-ab
          description: 'Invoke lambda that adds restaurants to a queue for id obtaining (Albacete-Capital)'
          rate: cron(21 4 * * ? *)
          enabled: true
          input:
            trip_advisor_place_id: g187486
            data_to_obtain: restaurant_id
      - schedule:
          name: schedule-google-maps-restaurant-data-obtaining-ab-chinchilla
          description: 'Invoke lambda that adds restaurants to a queue for data obtaining (Albacete-Chinchilla)'
          rate: cron(0 5 * * ? *)
          enabled: true
          input:
            trip_advisor_place_id: g1435704
            data_to_obtain: restaurant_data
      - schedule:
          name: schedule-google-maps-restaurant-data-obtaining-ab
          description: 'Invoke lambda that adds restaurants to a queue for data obtaining (Albacete-Capital)'
          rate: cron(1 5 * * ? *)
          enabled: true
          input:
            trip_advisor_place_id: g187486
            data_to_obtain: restaurant_data

  get-restaurant-id:
    role: ${self:custom.role}
    description: 'Obtains the google maps ID for a trip advisor restaurant'
    handler: functions/get_google_maps_id.handler
    environment: ${file(./env.json)}
    timeout: 900
    memorySize: 2048
    reservedConcurrency: 5
    layers:
      - ${cf:google-maps-layers-${self:custom.stage}.GoogleMapsLayerExport}
    events:
      - sqs:
          arn:
            Fn::GetAtt:
              - GoogleMapsFindIdQueue
              - Arn

  get-restaurant-data:
    role: ${self:custom.role}
    description: 'Obtains the restaurant data using google maps API'
    handler: functions/get_google_maps_data.handler
    environment: ${file(./env.json)}
    timeout: 900
    memorySize: 2048
    reservedConcurrency: 5
    layers:
      - ${cf:google-maps-layers-${self:custom.stage}.GoogleMapsLayerExport}
    events:
      - sqs:
          arn:
            Fn::GetAtt:
              - GoogleMapsGetDataQueue
              - Arn

resources:
  Resources:
    GoogleMapsBucket:
      Type: AWS::S3::Bucket
      Properties:
        BucketName: ${self:custom.googleMapsBucketName}

    GoogleMapsCandidatesDB:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: ${self:custom.googleMapsCandidatesDB}
        AttributeDefinitions:
          - AttributeName: ta_place_id
            AttributeType: S
          - AttributeName: ta_restaurant_id
            AttributeType: S
          - AttributeName: validated
            AttributeType: N
          - AttributeName: ts
            AttributeType: N
        KeySchema:
          - KeyType: HASH
            AttributeName: ta_place_id
          - KeyType: RANGE
            AttributeName: ta_restaurant_id
        GlobalSecondaryIndexes:
          - IndexName: ValidatedCandidates
            KeySchema:
              - AttributeName: validated
                KeyType: HASH
              - AttributeName: ts
                KeyType: RANGE
            Projection:
              ProjectionType: ALL
        BillingMode: PAY_PER_REQUEST

    NotifyAdminTopic:
      Type: AWS::SNS::Topic
      Properties:
        TopicName: ${self:custom.notifyAdminTopic}

    GoogleMapsFindIdQueue:
      Type: AWS::SQS::Queue
      Properties:
        QueueName: ${self:custom.googleMapsQueue}
        MessageRetentionPeriod: 259200  # 3 days
        VisibilityTimeout: 960  # 16 min
        RedrivePolicy:
          deadLetterTargetArn:
            Fn::GetAtt:
              - "GoogleMapsDeadLetterQueue"
              - "Arn"
          maxReceiveCount: 2

    GoogleMapsGetDataQueue:
      Type: AWS::SQS::Queue
      Properties:
        QueueName: ${self:custom.googleMapsGetDataQueue}
        MessageRetentionPeriod: 259200  # 3 days
        VisibilityTimeout: 960  # 16 min
        RedrivePolicy:
          deadLetterTargetArn:
            Fn::GetAtt:
              - "GoogleMapsDeadLetterQueue"
              - "Arn"
          maxReceiveCount: 2

    GoogleMapsDeadLetterQueue:
      Type: AWS::SQS::Queue
      Properties:
        QueueName: google-maps-dead-letter-queue-${self:custom.stage}
        MessageRetentionPeriod: 518400  # 6 days
plugins:
  - serverless-scriptable-plugin
