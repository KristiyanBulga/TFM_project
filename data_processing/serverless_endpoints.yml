service: data-endpoints

frameworkVersion: "=3.28.1"

package:
  patterns:
    - '!./**'
    - 'functions/api.py'
    - 'functions/api_restaurant_data.py'
    - 'functions/api_restaurant_reviews.py'
    - 'functions/api_weekly_query.py'
    - 'functions/update_weekly_data.py'
    - 'functions/create_weekly_query.py'
    - 'utils/helper_wo_pandas.py'

custom:
  defaultStage: dev
  defaultRegion: us-east-1
  stage: ${opt:stage, self:custom.defaultStage}
  region: ${opt:region, self:custom.defaultRegion}
  listRestaurantsDataDB: list-restaurants-data-db-${self:custom.stage}

provider:
  name: aws
  runtime: python3.9
  region: ${self:custom.region}
  stage: ${self:custom.stage}
  environment:
    region: ${self:custom.region}
    stage: ${self:custom.stage}
  apiGateway:
    apiKeys:
      - name: restaurants-data-${self:custom.stage}
        description: Api key to obtain restaurant data

functions:
  update-weekly-data:
    role: arn:aws:iam::992675252360:role/LabRole
    description: 'Create the weekly query per place id'
    handler: functions/update_weekly_data.handler
    timeout: 900
    events:
      - schedule:
          name: schedule-weekly-data-update
          description: 'Invoke lambda that updates the weekly data in dynamodb Albacete'
          rate: cron(0 5 ? * SUN *)
          enabled: true
          input:
            trip_advisor_place_id: g187486

  create-weekly-query:
    role: arn:aws:iam::992675252360:role/LabRole
    description: 'Create the weekly query per place id'
    handler: functions/create_weekly_query.handler
    timeout: 900
    events:
      - schedule:
          name: schedule-creation-weekly-query
          description: 'Invoke lambda that creates the weekly query for Albacete'
          rate: cron(0 7 ? * SUN *)
          enabled: true
          input:
            trip_advisor_place_id: g187486

  api:
    role: arn:aws:iam::992675252360:role/LabRole
    description: 'Router to all endpoints'
    handler: functions/api.router
    events:
      - http:
          path: /data/combined
          method: get
          cors: true
      - http:
          path: /data/trip_advisor
          method: post
          cors: true
  #        request:
  #          schemas:
  #            application/json: ${file(ass/swagger.yml):components.schemas.AlgoSubmitBody}

resources:
  Resources:
    ListRestaurantsDataDB:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: ${self:custom.listRestaurantsDataDB}
        AttributeDefinitions:
          - AttributeName: ta_place_id
            AttributeType: S
          - AttributeName: ta_restaurant_id
            AttributeType: S
        KeySchema:
          - KeyType: HASH
            AttributeName: ta_place_id
          - KeyType: RANGE
            AttributeName: ta_restaurant_id
        BillingMode: PAY_PER_REQUEST